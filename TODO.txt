# Notes

## Issues

Order is not defined between message types.  This makes testing hard.

## Monitoring

Have:

A Runtime that is aware of all running actors and monitors their health.

Future:

* Monitor support similar to Erlang's
  * something like link so we can build supervisors
  * send health failures to supervisors
* Useful runtime metrics
  * Expvar integration?
  * channel utilization
  * actor utilization

## Isolation

The actor spawn process copies the initial actor data, making it difficult to
share data with a running actor.

## Communication

Communication between actors is abstracted into Mailboxes, which have Tx and
Rx pairs that are split at spawn time.  If desired, a single Mailbox can be
used with multiple actors, resulting in a MPMC connection (multiple actors
pulling from the same mailbox).

Timers are handled as a special kind of Mailbox with no Tx side.  Actors can
manipulate mailboxes as they see fit, including settings timers or
enabling/disabling polling of channels.

# TODO

* clean up how mailbox types are specified; maybe parse `<path>.FooMailbox`?
  * allow message-type to have a package as well
  * determine kind automatically where possible, otherwise require for actor
    def
* add some more predefined mailbox types (string, int, struct{}, etc.)
* [WIP] implement a fake logs-agent
  * inputs (tailing, decoder, etc.) w/ supervisor
  * parser
  * tagger
  * forwarders
  * auditor
* more flexible health monitoring options
* try MPMC
* more mailbox types
  * RPC (blocking, with sync channel)
  * Timer (heap of times with callbacks)
  * Listener (rx Conn)
  * Connection (rx buffers)
  * Empty (struct{})
  * Buffer (Sender gets slices to write to, Receiver gets slices and can
    release a prefix of the received slice; useful for splitting streams)
* mix Context in here somehow
  * in the RPC mailbox
  * Get a context that will end on actor stop?

Misc:
* add a license
* fix startup/super race conditions the way erlang does
* Rx type should be private
* put ID in the Base type
* support Go Docs

Later:
* allow build flags for generation
* document thespian.yml
