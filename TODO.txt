# TODO

## Monitoring

Maybe there's a "thespian runtime" that handles monitoring all actors and
ensuring the various invariants.

Want:

* Build monitor support similar to Erlang's
  * something like link so we can build supervisors
  * Health monitoring to kill "stuck" actors
* Useful runtime metrics
  * Expvar integration?
  * channel utilization
  * actor utilization

## Communication

Make channels ("connections"?) a first-class type, that must be provided when
creating a new actor instance.

Want:

* Abstraction for channels, too (mailbox)
* Some way to support multiple consumers (e.g., multiple demuxes)
* Flexible polling (so, ignore some messages in some modes)

## Tasks

* figure out how to sub-template based on mbox kind
* generate from thespian.yml (or toml or something) in the package dir, to
  avoid parsing go at all
  * parsing go leads to weird needs to run the script twice
  * actor mailboxes should give kind, (for message-based) mailbox type name, message type
    * some mailbox type names are predefined (e.g., Timer)
  * (can't always refer to types in other packages as they may not include .yml)
* builder pattern for actors
  * but keep the Rx fields in the user-defined struct, as they can have
    methods (settings for ticker or timer, enable/disable for channels)
  * FooBuilder { foo, IncrMailbox, .. } - mailboxes set to enable MPMC or
    initial settings
  * FooBuilder.spawn _copies_ foo, sets up, returns Foo
* a way to test this with unit tests and not a program

Misc:
* copy the private struct in `spawn` so that callers *cannot* maintain a
  reference to it
* move some types to internal/
* allow mailbox types not in the same package (still need info on their type)

Later:
* allow build flags for generation
* use something with fewer deps than cobra (gRPC?!?)

