package gen

import "strings"

type RPCMailboxGenerator struct {
	ThisPackage  string
	RequestType  string
	ResponseType string
	MboxTypeBase string
	Imports      []string
	MboxTypeQual string
	ActorName    string
	FieldName    string
}

func (g *RPCMailboxGenerator) GenerateGo(out *formatter) {
	out.executeTemplate(getTemplate(
		"rpc_mailbox_go_file", `
{{- $req := printf "%sReq" .MboxTypeBase | public }}
{{- $mbox := printf "%sMailbox" .MboxTypeBase | public }}
{{- $tx := printf "%sTx" .MboxTypeBase | public }}
{{- $rx := printf "%sRx" .MboxTypeBase | public }}
// code generated by thespian; DO NOT EDIT

package {{.ThisPackage}}

import (
	"context"

	{{- range .Imports }}
	{{ . }}
	{{- end }}
)

// {{$req}} is a request paired with a channel over which the
// response will be sent.
type {{$req}} struct {
	ctx context.Context
	req {{.RequestType}}
	resC chan<- {{.ResponseType}}
}

// {{$mbox}} is a mailbox for RPC calls of type {{.RequestType}}.
type {{$mbox}} struct {
	// c is the channel carrying requests and response channels
	c chan {{$req}}
	// Disabled, if set to true, causes the mailbox to start life disabled.
	Disabled bool
}

// ApplyDefaults applies default settings to this {{public .MboxTypeBase}}, if
// the struct has its zero value.
func (mbox *{{$mbox}}) ApplyDefaults() {
	mbox.c = make(chan {{$req}})
}

// Tx creates a {{$tx}} for this mailbox
func (mbox *{{$mbox}}) Tx() {{$tx}} {
	return {{$tx}}{
		c: mbox.c,
	}
}

// Rx creates a {{$rx}} for this mailbox
func (mbox *{{$mbox}}) Rx() {{$rx}} {
	return {{$rx}}{
		c: mbox.c,
		Disabled: mbox.Disabled,
	}
}

// {{$tx}} sends to a mailbox for messages of type {{.RequestType}}.
type {{$tx}} struct {
	c chan<- {{$req}}
}

// {{$rx}} receives from a mailbox for messages of type {{.RequestType}}.
type {{$rx}} struct {
	c <-chan {{$req}}
	// Disabled, if set to true, will disable receipt of messages from this mailbox.
	Disabled bool
}

// Chan gets a channel for this mailbox, or nil if there is nothing to select from.
func (rx *{{$rx}}) Chan() <-chan {{$req}} {
	if rx.Disabled {
		return nil
	}
	return rx.c
}`), g)
}

func (g *RPCMailboxGenerator) ActorBuilderStructDecl() string {
	return renderTemplate(
		"rpc_actor_builder_struct_decl",
		`{{.FieldName}} {{.MboxTypeQual}}{{.MboxTypeBase}}Mailbox`,
		g)
}

func (g *RPCMailboxGenerator) ActorRxStructDecl() string {
	return renderTemplate(
		"rpc_actor_rx_struct_decl",
		`{{.FieldName}} {{.MboxTypeQual}}{{.MboxTypeBase}}Rx`,
		g)
}

func (g *RPCMailboxGenerator) ActorRxInitializer() string {
	return renderTemplate(
		"rpc_actor_rx_initializer",
		`{{.FieldName}}: bldr.{{.FieldName}}.Rx(),`,
		g)
}

func (g *RPCMailboxGenerator) ActorTxStructDecl() string {
	return renderTemplate(
		"rpc_actor_tx_struct_decl",
		`{{.FieldName}} {{.MboxTypeQual}}{{.MboxTypeBase}}Tx`,
		g)
}

func (g *RPCMailboxGenerator) ActorTxInitializer() string {
	return renderTemplate(
		"rpc_actor_tx_initializer",
		`{{.FieldName}}: bldr.{{.FieldName}}.Tx(),`,
		g)
}

func (g *RPCMailboxGenerator) ActorTxStructMethod() string {
	return renderTemplate(
		"rpc_actor_tx_struct_method", strings.TrimSpace(`
		// {{public .FieldName}} makes a synchronous request to the actor's {{.FieldName}} mailbox.
		func (tx *{{public .ActorName}}Tx) {{public .FieldName}}(ctx context.Context, req {{.RequestType}}) (res {{.ResponseType}}, err error) {
			resC := make(chan {{.ResponseType}})
			tx.{{private .FieldName}}.c <- {{.MboxTypeQual}}{{.MboxTypeBase}}Req {ctx, req, resC}
			select {
			case res = <-resC:
				return
			case <- ctx.Done():
			    err = ctx.Err()
				return
			}
		}`), g)
}

func (g *RPCMailboxGenerator) ActorSpawnSetupClause() string {
	return renderTemplate(
		"rpc_actor_spawn_setup_clause", strings.TrimSpace(`
		bldr.{{.FieldName}}.ApplyDefaults()
		`), g)
}

func (g *RPCMailboxGenerator) ActorLoopCase() string {
	return renderTemplate(
		"rpc_actor_loop_case", strings.TrimSpace(`
			case m := <-rx.{{.FieldName}}.Chan():
				res := a.handle{{public .FieldName}}(m.ctx, m.req)
				m.resC <- res
		`), g)
}

func (g *RPCMailboxGenerator) ActorCleanupClause() string {
	return ""
}
