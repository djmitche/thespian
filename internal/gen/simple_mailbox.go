package gen

import "strings"

type TickerMailboxGenerator struct {
	ThisPackage  string
	MboxTypeBase string

	// actor generation only
	MboxTypeQual string
	ActorName    string
	FieldName    string
}

func (g *TickerMailboxGenerator) GenerateGo(out *formatter) {
	out.executeTemplate(getTemplate(
		"ticker_mailbox_go_file", `
// code generated by thespian; DO NOT EDIT

package {{.ThisPackage}}

import "time"

// {{.MboxTypeBase}}Rx contains a ticker that the actor implementation can control
type {{.MboxTypeBase}}Rx struct {
	// Ticker is the ticker this mailbox responds to, or nil if it is disabled
	Ticker *time.Ticker
	// Never is a channel that never carries a message, used when Ticker is nil
	never chan time.Time
}

func New{{.MboxTypeBase}}Rx() {{.MboxTypeBase}}Rx {
	return {{.MboxTypeBase}}Rx{
		Ticker: nil,
		// TODO: just use one of these, globally
		never: make(chan time.Time),
	}
}

// Chan gets a channel for this ticker
func (rx *{{.MboxTypeBase}}Rx) Chan() <-chan time.Time {
	if rx.Ticker != nil {
		return rx.Ticker.C
	}
	return rx.never
}`), g)
}

func (g *TickerMailboxGenerator) ActorPublicStructDecl() string {
	return ""
}

func (g *TickerMailboxGenerator) ActorPublicStructMethod() string {
	return ""
}

func (g *TickerMailboxGenerator) ActorSpawnSetupClause() string {
	return ""
}

func (g *TickerMailboxGenerator) ActorSpawnRxAssignmentClause() string {
	return renderTemplate(
		"simple_actor_spawn_rx_assignment_clause",
		`a.{{.FieldName}}Rx = {{.MboxTypeQual}}New{{public .MboxTypeBase}}Rx()`,
		g)
}

func (g *TickerMailboxGenerator) ActorSpawnHandleInitializer() string {
	return ""
}

func (g *TickerMailboxGenerator) ActorLoopCase() string {
	return renderTemplate(
		"simple_actor_spawn_loop_case", strings.TrimSpace(`
			case t := <-a.{{.FieldName}}Rx.Chan():
				a.handle{{public .FieldName}}(t)
		`), g)
}

func (g *TickerMailboxGenerator) ActorCleanupClause() string {
	// TODO
	return ""
}
