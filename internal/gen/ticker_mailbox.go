package gen

import "strings"

type SimpleMailboxGenerator struct {
	ThisPackage string
	MessageType string
	Type        string

	// actor generation only
	Package   string
	ActorName string
	FieldName string
}

func (g *SimpleMailboxGenerator) GenerateGo(out *formatter) {
	out.executeTemplate(getTemplate(
		"simple_mailbox_go_file", `
// code generated by thespian; DO NOT EDIT

package {{.ThisPackage}}

// {{public .Type}}Mailbox is a mailbox for messages of type {{.MessageType}}.
type {{public .Type}}Mailbox struct {
	C chan {{.MessageType}}
}

func New{{public .Type}}Mailbox() {{public .Type}}Mailbox {
	return {{public .Type}}Mailbox{
		C: make(chan {{.MessageType}}, 10), // TODO: channel size??
	}
}

// Tx creates a {{.Type}}Tx for this mailbox
func (mbox *{{public .Type}}Mailbox) Tx() {{.Type}}Tx {
	return {{.Type}}Tx{
		C: mbox.C,
	}
}

// Rx creates a {{.Type}}Rx for this mailbox
func (mbox *{{public .Type}}Mailbox) Rx() {{.Type}}Rx {
	return {{.Type}}Rx{
		C: mbox.C,
	}
}

// {{.Type}}Tx sends to a mailbox for messages of type {{.MessageType}}.
type {{.Type}}Tx struct {
	C chan<- {{.MessageType}}
}

// {{.Type}}Rx receives from a mailbox for messages of type {{.MessageType}}.
type {{.Type}}Rx struct {
	C <-chan {{.MessageType}}
}`), g)
}

func (g *SimpleMailboxGenerator) ActorPublicStructDecl() string {
	return renderTemplate(
		"simple_actor_public_struct_decl",
		`{{.FieldName}}Tx {{.Type}}Tx`,
		g)
}

func (g *SimpleMailboxGenerator) ActorPublicStructMethod() string {
	return renderTemplate(
		"simple_actor_public_struct_method", strings.TrimSpace(`
		// {{public .FieldName}} sends to the actor's {{.FieldName}} mailbox.
		func (a *{{public .ActorName}}) {{public .FieldName}}(m {{.MessageType}}) {
			a.{{private .FieldName}}Tx.C <- m
		}`), g)
}

func (g *SimpleMailboxGenerator) ActorSpawnSetupClause() string {
	return renderTemplate(
		"simple_actor_spawn_setup_clause",
		`{{.FieldName}}Mailbox := New{{.Type}}Mailbox()`,
		g)
}

func (g *SimpleMailboxGenerator) ActorSpawnRxAssignmentClause() string {
	return renderTemplate(
		"simple_actor_spawn_rx_assignment_clause",
		`a.{{.FieldName}}Rx = {{.FieldName}}Mailbox.Rx()`,
		g)
}

func (g *SimpleMailboxGenerator) ActorSpawnHandleInitializer() string {
	return renderTemplate(
		"simple_actor_spawn_handle_initializer",
		`{{.FieldName}}Tx: {{.FieldName}}Mailbox.Tx(),`,
		g)
}

func (g *SimpleMailboxGenerator) ActorLoopCase() string {
	return renderTemplate(
		"simple_actor_spawn_loop_case", strings.TrimSpace(`
			case m := <-a.{{.FieldName}}Rx.C:
				a.handle{{public .FieldName}}(m)
		`), g)
}

func (g *SimpleMailboxGenerator) ActorCleanupClause() string {
	// TODO
	return ""
}
