// code generated by thespian; DO NOT EDIT

package gentest

import (
	"github.com/djmitche/thespian"
)

// ReporterBuilder is used to buidl new Reporter actors.
type ReporterBuilder struct {
	reporter
	report StringSliceMailbox
}

func (bldr ReporterBuilder) spawn(rt *thespian.Runtime) *ReporterTx {
	reg := rt.Register()
	bldr.report.ApplyDefaults()

	rx := &ReporterRx{
		id:         reg.ID,
		stopChan:   reg.StopChan,
		healthChan: reg.HealthChan,
		report:     bldr.report.Rx(),
	}

	tx := &ReporterTx{
		stopChan: reg.StopChan,
		report:   bldr.report.Tx(),
	}

	// copy to a new reporter instance
	pvt := bldr.reporter
	pvt.rt = rt
	pvt.rx = rx
	pvt.tx = tx

	go pvt.loop()
	return tx
}

// ReporterRx contains the Rx sides of the mailboxes, for access from the
// Reporter implementation.
type ReporterRx struct {
	id         uint64
	stopChan   <-chan struct{}
	healthChan <-chan struct{}
	report     StringSliceRx
}

// ReporterTx is the public handle for Reporter actors.
type ReporterTx struct {
	stopChan chan<- struct{}
	report   StringSliceTx
}

// Stop sends a message to stop the actor.  This does not wait until
// the actor has stopped.
func (a *ReporterTx) Stop() {
	select {
	case a.stopChan <- struct{}{}:
	default:
	}
}

// Report sends to the actor's report mailbox.
func (tx *ReporterTx) Report(m []string) {
	tx.report.C <- m
}

func (a *reporter) loop() {
	rx := a.rx
	defer func() {

		a.rt.ActorStopped(a.rx.id)
	}()
	a.handleStart()
	for {
		select {
		case <-rx.healthChan: // TODO
			// nothing to do
		case <-rx.stopChan:
			a.handleStop()
			return
		case m := <-rx.report.C:
			a.handleReport(m)
		}
	}
}
