// code generated by thespian; DO NOT EDIT

package super

import (
	"context"
)

// StringRPCReq is a request paired with a channel over which the
// response will be sent.
type StringRPCReq struct {
	ctx  context.Context
	req  string
	resC chan<- string
}

// StringRPCMailbox is a mailbox for RPC calls of type string.
type StringRPCMailbox struct {
	// c is the channel carrying requests and response channels
	c chan StringRPCReq
	// Disabled, if set to true, causes the mailbox to start life disabled.
	Disabled bool
}

// ApplyDefaults applies default settings to this StringRPC, if
// the struct has its zero value.
func (mbox *StringRPCMailbox) ApplyDefaults() {
	mbox.c = make(chan StringRPCReq)
}

// Tx creates a StringRPCTx for this mailbox
func (mbox *StringRPCMailbox) Tx() StringRPCTx {
	return StringRPCTx{
		c: mbox.c,
	}
}

// Rx creates a StringRPCRx for this mailbox
func (mbox *StringRPCMailbox) Rx() StringRPCRx {
	return StringRPCRx{
		c:        mbox.c,
		Disabled: mbox.Disabled,
	}
}

// StringRPCTx sends to a mailbox for messages of type string.
type StringRPCTx struct {
	c chan<- StringRPCReq
}

// StringRPCRx receives from a mailbox for messages of type string.
type StringRPCRx struct {
	c <-chan StringRPCReq
	// Disabled, if set to true, will disable receipt of messages from this mailbox.
	Disabled bool
}

// Chan gets a channel for this mailbox, or nil if there is nothing to select from.
func (rx *StringRPCRx) Chan() <-chan StringRPCReq {
	if rx.Disabled {
		return nil
	}
	return rx.c
}
